// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for staff, counselors, admins
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(COUNSELOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  COUNSELOR
}

// Student model
model Student {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String       @unique // University-assigned ID
  name           String
  email          String       @unique
  enrollmentDate DateTime
  courses        Course[]     @relation(fields: [courseIds], references: [id])
  courseIds      String[]     @db.ObjectId
  submissions    Submission[]
  moodReports    MoodReport[]
  alerts         Alert[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  courseCode  String       @unique
  title       String
  students    Student[]    @relation(fields: [studentIds], references: [id])
  studentIds  String[]     @db.ObjectId
  assignments Assignment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Assignment {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  dueDate      DateTime
  maxScore     Int
  course       Course       @relation(fields: [courseId], references: [id])
  courseId     String       @db.ObjectId
  submissions  Submission[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([courseId])
}

model Submission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String     @db.ObjectId
  submittedAt  DateTime
  grade        Int? // Can be null if not graded yet
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([studentId, assignmentId])
  @@index([assignmentId])
}

// Optional model for self-reported mood
model MoodReport {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String   @db.ObjectId
  moodScore  Int // e.g., 1-5 scale
  notes      String?
  reportedAt DateTime @default(now())

  @@index([studentId])
}

// Alert generated by the system
model Alert {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  student    Student     @relation(fields: [studentId], references: [id])
  studentId  String      @db.ObjectId
  riskScore  Float
  reason     String
  status     AlertStatus @default(OPEN)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  resolvedAt DateTime?
  resolvedBy String? // User ID of resolver

  @@index([studentId])
  @@index([status])
}

enum AlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}